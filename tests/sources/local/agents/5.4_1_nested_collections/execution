#!/bin/bash

  # Obtain parameters
  COMPSs_exec=$1
  comm=$2
  runcompss_opts=$3
  base_app_dir=$4
  COMPSs_log_folder=$5
  target_log_folder=$6
  retry_num=$7
  execution_envs=$8
  
  # Global variables
  AGENT_PIDS=""
  exit_value=0
  NUM_RETRIES="50"
  app_name="5.4_1_agents_python_collections"

  # Traps and Handlers
  function kill_agents() {
    for pid in ${AGENT_PIDS}; do
      kill -SIGINT ${pid}
    done
  }
  trap kill_agents EXIT

  #----------------------------------------------------------------------------------
  # Generate Project.xml according to system
  sed -i '/<InstallDir>/c<InstallDir>'"${COMPSS_HOME}"'<\/InstallDir>' "${base_app_dir}"/project.xml
  
  #----------------------------------------------------------------------------------
  # Create all working dir folders
  mkdir -p /tmp/COMPSsWorker01/
  
  #----------------------------------------------------------------------------------
  # Run application
  echo ""
  echo "*** RUNNING AGENTS TEST: nested compss 1 agent"
  log_dir="${COMPSs_log_folder}/${app_name}_0${retry_num}/"
  mkdir -p "${log_dir}"
  output_log="${log_dir}test.outputlog"
  error_log="${log_dir}test.errorlog"
  touch "${output_log}"
  touch "${error_log}"

  # Starting agent
agent1_log_dir="${log_dir}/agent1/"
mkdir -p "${agent1_log_dir}" 
agent1_output_log="${log_dir}agent1.outputlog"
agent1_error_log="${log_dir}agent1.errorlog"
compss_agent_start \
  --hostname="COMPSsWorker01" \
  --pythonpath="${base_app_dir}/src" \
  --log_dir="${agent1_log_dir}" \
  --rest_port="46101" \
  --comm_port="46102" \
  -d \
  ${runcompss_opts} \
  --project="${base_app_dir}/project.xml" \
  --resources="${base_app_dir}/resources.xml" 1>"${agent1_output_log}" 2>"${agent1_error_log}" &

agent_pid="$!"
AGENT_PIDS="${AGENT_PIDS} ${agent_pid}"


    retries="${NUM_RETRIES}"
  curl -XGET http://127.0.0.1:46101/COMPSs/test 1>/dev/null 2>/dev/null
    ev=$?
    while [ "$ev" != "0" ] && [ "${retries}" -gt "0" ]; do
      sleep 2s
      retries=$((retries - 1 ))
    curl -XGET http://127.0.0.1:46101/COMPSs/test 1>/dev/null 2>/dev/null
      ev=$?
    done


  RESULT=$(grep "test invoked" "${agent1_output_log}")
    if [ -z "${RESULT}" ]; then  
      echo "Agent failed to start" > >(tee -a "${error_log}")
      exit 1
    fi
    echo "Agent started" > >(tee -a "${output_log}")
    sleep 2s
 
  # CHECK WHETHER THE PROJECT FILE HAS BEEN PROPERLY READ
  RESOURCES=$(curl -XGET http://127.0.0.1:46101/COMPSs/resources 2>/dev/null)
  num_RESOURCES=$(echo "${RESOURCES}" | jq '.resources | length')
  if [ ! "${num_RESOURCES}" == "1" ]; then
    echo "Wrong number of RESOURCE tags on the agent's output. Found .${num_RESOURCES}.; 1 expected." > >(tee -a "${error_log}")
    exit 1
  fi
  RESOURCE=$(echo "${RESOURCES}" | jq '.resources[] | select(.name=="COMPSsWorker01")')
  if [ -z "${RESOURCE}" ]; then
    echo "Wrong Resource on Agent; COMPSsWorker01 expected." > >(tee -a "${error_log}")
    exit 1
  fi
  DESCRIPTION=$(echo "${RESOURCE}" | jq '.description ')
  PROCESSOR_COUNT=$(echo "${DESCRIPTION}" | jq '.processors | length')
  if [ ! "${PROCESSOR_COUNT}" == "1" ]; then
    echo "Wrong number of Processors configured for the Agent. Found ${PROCESSOR_COUNT}; 1 expected." > >(tee -a "${error_log}")
    exit 1
  fi
  CPU_COUNT=$(echo "${DESCRIPTION}" | jq '.processors[] | select(.name=="MainProcessor") | .units')
  if [ ! "${CPU_COUNT}" == "1" ]; then
    echo "Wrong number of CPU cores configured for the Agent. Found ${CPU_COUNT}; 1 expected." > >(tee -a "${error_log}")
    exit 1
  fi

  # Invoking DemoFunction method
  "${COMPSS_HOME}/Runtime/scripts/user/compss_agent_call_operation" \
   --lang="PYTHON" \
   --master_node="127.0.0.1" \
   --master_port="46101" \
   --method_name="main" \
   --stop \
   "nested_collection_detection" > >(tee -a "${output_log}") 2> >(tee -a "${error_log}")
   ev=$?

    wait ${agent_pid}

   sleep 10s
   if [ "$ev" != "0" ]; then
    echo "Could not invoke main method." > >(tee -a "${error_log}")
    exit $ev
  fi
  echo "main function invoked" > >(tee -a "${output_log}")

  retries="3"
  while [ ! -f "${agent1_log_dir}/jobs/job1_NEW.out" ] && [ "${retries}" -gt "0" ]; do
    sleep 2s
    retries=$((retries - 1 ))
  done
  if [ ! -f "${agent1_log_dir}/jobs/job1_NEW.out" ]; then
    echo "Could not invoke main method." > >(tee -a "${error_log}")
    exit 1
  fi
  sleep 5

  job1_method=$( grep "METHOD NAME" "${agent1_log_dir}/jobs/job1_NEW.out" | cut -d '=' -f3)
  if [ -n "${job1_method}" ]; then
    job1_method="${job1_method::-1}"
  fi
  if [ ! "${job1_method}" == "main" ]; then
    echo "Unexpected method (${job1_method}) for job 1." > >(tee -a "${error_log}")
    exit 1
  fi
  echo  "main method properly started" > >(tee -a "${output_log}")
  created_jobs=$(ls "${agent1_log_dir}jobs" | grep -c NEW.out)
  if [ ! "${created_jobs}" == "5" ]; then
    echo "COMPSs has generated ${created_jobs} tasks and only 5 expected." > >(tee -a "${error_log}")
    exit 1
  fi 
  job2_method=$( grep "METHOD NAME" "${agent1_log_dir}/jobs/job2_NEW.out" | cut -d '=' -f3)
  if [ -n "${job2_method}" ]; then
    job2_method="${job2_method::-1}"
  fi
  job3_method=$( grep "METHOD NAME" "${agent1_log_dir}/jobs/job3_NEW.out" | cut -d '=' -f3)
  if [ -n "${job3_method}" ]; then
    job3_method="${job3_method::-1}"
  fi
  job4_method=$( grep "METHOD NAME" "${agent1_log_dir}/jobs/job4_NEW.out" | cut -d '=' -f3)
  if [ -n "${job4_method}" ]; then
    job4_method="${job4_method::-1}"
  fi
  job5_method=$( grep "METHOD NAME" "${agent1_log_dir}/jobs/job4_NEW.out" | cut -d '=' -f3)
  if [ -n "${job5_method}" ]; then
    job4_method="${job5_method::-1}"
  fi
  
sleep 5 
  printIntColl_value=$( grep printIntCollResult: ${agent1_log_dir}/jobs/* | cut -d ":" -f3)
  printObjColl_value=$( grep printObjCollResult: ${agent1_log_dir}/jobs/* | cut -d ":" -f3)
  createIntColl_value=$( grep createIntCollectionResult: ${agent1_log_dir}/jobs/* | cut -d ":" -f3)
  createObjColl_value=$( grep createObjCollectionResult: ${agent1_log_dir}/jobs/* | cut -d ":" -f3)

  echo ______ buscando en ${agent1_log_dir}

  echo printIntColl_value $printIntColl_value
  echo printObjColl_value $printObjColl_value
  echo createIntColl_value $createIntColl_value
  echo createObjColl_value $createObjColl_value


  if [ ! "${printIntColl_value}" == "[1, 2, 3, [41, 42, 43]]" ]; then
    echo "Unexpected value (${printIntColl_value}) for tag printIntCollResult." > >(tee -a "${error_log}")
    exit 1
  fi
  if [ ! "${printObjColl_value}" == "[D[1], D[2], D[3], [D[41], D[42], D[43]]]" ]; then
    echo "Unexpected value (${printObjColl_value}) for tag printObjCollResult." > >(tee -a "${error_log}")
    exit 1
  fi
  if [ ! "${createIntColl_value}" == "[1, 2, 3, [41, 42, 43]]" ]; then
    echo "Unexpected value (${createIntColl_value}) for tag createIntCollectionResult." > >(tee -a "${error_log}")
    exit 1
  fi
  if [ ! "${createObjColl_value}" == "[D[1], D[2], D[3], [D[41], D[42], D[43]]]" ]; then
    echo "Unexpected value (${createObjColl_value}) for tag createObjcollectionResult." > >(tee -a "${error_log}")
    exit 1
  fi
  echo "All task executed as expected and with the expected values." 


  # Copy LOG files
  cp -rf "${COMPSs_log_folder}/${app_name}_0${retry_num}"/* "${target_log_folder}"
  exit_value=0

  #----------------------------------------------------------------------------------
  # Return execution status
  exit ${exit_value}

