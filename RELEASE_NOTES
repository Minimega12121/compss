---------------------------̣---
  COMP SUPERSCALAR FRAMEWORK
------------------------------

COMP Superscalar (COMPSs) is a programming model that aims to ease the development of applications for distributed infrastructures,
such as Clusters, Grids and Clouds. COMP superscalar also features a runtime system that exploits the inherent parallelism of 
applications at execution time.

Release number: 2.9 (Jasmine) 
Release date: June-2021
-------------------------------
New features
         * Runtime:
		- Support for nested tasks in agents deployment 
		- New application time out functionality to enable a controlled finalization of applications before the wall_clock_limit 
		- New flags to simplify application debugging (--keep_workingdir, --gen_coredump)
		- Support for loading the application environment from scripts
		- Support for tracing in agents environment.

         * Python:
		- Support for Optional parameters and default values
		- Enable monitoring task status from Jupyter notebooks.
		- Enabling python memoty profile
		- Python workers cache.
		- Support for returns value override at task invocation

	* DDS:
		 - New methods and optimizations in DDS class.
Improvements:
        - Enabling passing extra queue system flags from enqueue_compss.
        - Supporting multiple data layout in mpi tasks
	- Improvements in tracing system. 
	- Enabling a flag to change extrae configuration file for python processes.
	- Configuration files for Barbora system.
	- Several Bug fixes.

Known Limitations:
        - Objects used as task parameters must be serializable.
        - Tasks that invoke Numpy and MKL may experience issues if a different MKL threads count is used in different tasks. This is due to the fact that MKL reuses  threads in the different calls and it does not change the number of threads from one call to another. This can be also happen with other libraries implemented with OpenMP.
        - C++ Objects declared as arguments in coarse-grain tasks must be passed as object pointers in order to have proper dependency management.
        - Master as worker is not working for executions with persistent worker in C++.
	- Coherence and concurrent writing in parameters annotated with the "Concurrent" direction must be managed by the underlying distributed storage system.
	- Delete file calls for files used as input can produce a significant synchronization of the main code.
	- Defining a parameter as OUT is only allowed for files and collections of objects with a default constructor.   

For further information, please refer to “COMPSs User Manual: Application development guide”.

Please find more details about the COMP Superscalar framework at: 
		http://compss.bsc.es/
