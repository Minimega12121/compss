import typing
import os

from urllib.parse import urlsplit
from pathlib import Path


def get_common_paths(url_list: list) -> list:
    """
    Find the common paths in the list of files passed.

    :param url_list: Sorted list of file URLs as generated by COMPSs runtime

    :returns: List of identified common paths among the URLs
    """

    # print(f"PROVENANCE DEBUG | Input to get_common_paths INS and OUTS: {url_list}")
    list_common_paths = []  # Create common_paths list, with counter of occurrences
    if not url_list:  # Empty list
        return list_common_paths

    # The list comes ordered, so all dir:// references will come first
    # We don't need to skip them, we need to add them, since they are common paths already
    i = 0
    file_found = False
    for item in url_list:
        url_parts = urlsplit(item)
        if url_parts.scheme == "dir":
            if url_parts.path not in list_common_paths:
                list_common_paths.append(url_parts.path)
            i += 1
            # print(f"PROVENANCE DEBUG | ADDING DIRECTORY AS COMMON_PATH {url_parts.path}")
            continue
        else:
            file_found = True
            break

    if not file_found:
        # All are directories
        # print(f"PROVENANCE DEBUG | Resulting list of common paths with only directories is: {list_common_paths}")
        return list_common_paths

    # Add first found file
    url_parts = urlsplit(url_list[i])
    # Need to remove schema and hostname from reference, and filename
    common_path = str(Path(url_parts.path).parents[0])
    i += 1

    url_files_list = url_list[i:]  # Slice out directories and the first file
    for item in url_files_list:
        # url_list is a sorted list, important for this algorithm to work
        # if item and common_path have a common path, store that common path in common_path and continue, until the
        # shortest common path different than 0 has been identified
        # https://docs.python.org/3/library/os.path.html  # os.path.commonpath

        url_parts = urlsplit(item)
        # Remove schema and hostname
        tmp = os.path.commonpath(
            [url_parts.path, common_path]
        )  # url_parts.path does not end with '/'
        if tmp != "/":  # String not empty, they have a common path
            # print(f"PROVENANCE DEBUG | Searching. Previous common path is: {common_path}. tmp: {tmp}")
            common_path = tmp
        else:  # if they don't, we are in a new path, so, store the previous in list_common_paths, and assign the new to common_path
            # print(f"PROVENANCE DEBUG | New root to search common_path: {url_parts.path}")
            if common_path not in list_common_paths:
                list_common_paths.append(common_path)
            common_path = str(
                Path(url_parts.path).parents[0]
            )  # Need to remove filename from url_parts.path

    # Add last element's path
    if common_path not in list_common_paths:
        list_common_paths.append(common_path)

    # All paths internally need to finish with a '/'
    for item in list_common_paths:
        if item[-1] != "/":
            list_common_paths.append(item + "/")
            list_common_paths.remove(item)

    # print(f"PROVENANCE DEBUG | Resulting list of common paths is: {list_common_paths}")

    return list_common_paths
