#!/bin/bash

# Command to simulate realpath
if [ -z "${COMPSS_HOME}" ]; then
  COMPSS_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )"/../../.. && pwd )/"
fi
if [ ! "${COMPSS_HOME: -1}" = "/" ]; then
  COMPSS_HOME="${COMPSS_HOME}/"
fi
export COMPSS_HOME=${COMPSS_HOME}

# Load auxiliar scripts
source "${COMPSS_HOME}Runtime/scripts/system/commons/version.sh"
source "${COMPSS_HOME}Runtime/scripts/system/agents/commons.sh"

#---------------------------------------------------------------------------------------
# SCRIPT CONSTANTS DECLARATION
#---------------------------------------------------------------------------------------
APP_CMD="curl"
DEFAULT_METHOD="main"
DEFAULT_LANG="JAVA"

#---------------------------------------------------------------------------------------
# ERROR CONSTANTS DECLARATION
#---------------------------------------------------------------------------------------
ERROR_APPLICATION="Missing application name parameter"
ERROR_MASTER_NODE="Missing master node parameter"
ERROR_MASTER_PORT="Missing master port parameter"

#---------------------------------------------------------------------------------------
# GENERIC HELPER FUNCTIONS
#---------------------------------------------------------------------------------------

###############################################
# Displays usage
###############################################
usage() {
  local exitValue=$1
  SCRIPT_NAME=$(basename "$0")
  cat <<EOT
Usage: ${SCRIPT_NAME} [options] application_name application_arguments

* Options:
  General:
    --help, -h                              Print this help message

    --opts                                  Show available options

    --version, -v                           Print COMPSs version

    --master_node=<string>                  Node where to run the COMPSs Master
                                            Mandatory

    --master_port=<string>                  Node where to run the COMPSs Master
                                            Mandatory    

    --stop                                  Stops the agent after the execution
                                            of the task.   

    --forward_to=<list>                     Forwards the stop action to other
                                            agents, eht list shoud follow the
                                            format:
                                            <ip1>:<port1>;<ip2>:<port2>...
  Launch configuration:
EOT

  show_opts "$exitValue"
}

###############################################
# Displays errors when treating arguments
###############################################
display_invocation() {
  echo "Invocation details:"
  echo "    Host:               ${master_node}"
  echo "    Port:               ${master_port}"
  echo "    Lang:               ${lang}"
  echo "    Class name:         ${fullAppPath}"
  echo "    Method name:        ${method_name}"
  if [ ! -z "${cei}" ]; then
    echo "    COMPSs Interface    ${cei}"
  fi
  echo "    Parameters:"
  if [ "${params_as_array}" == "true" ]; then
    local params="["
    if [ $# -gt 0 ]; then
      params="${params}$1"
      shift 1
      for param in "$@"; do
        params="${params}, ${param}"
      done
    fi 
    params="${params}]"
    echo "        * $params"
  else
    for param in "$@"; do
      echo "        * ${param}"
    done
  fi
}

###############################################
# Show Options
###############################################
show_opts() {
  local exitValue=$1

  # Show usage
  cat <<EOT
    --cei=<string>                          Canonical name of the interface declaring the methods
                                            Default: No interface declared

    --lang=<string>                         Language implementing the operation
                                            Default: ${DEFAULT_LANG}

    --method_name=<string>                  Name of the method to invoke
                                            Default: main and enables array parameter

    --parameters_array, --array             Parameters are encapsulated as an array
                                            Default: disabled
EOT

  exit "$exitValue"
}


#---------------------------------------------------------------------------------------
# MAIN FUNCTIONS
#---------------------------------------------------------------------------------------

###############################################
# Function to get the arguments
###############################################
get_args() {
  # Avoid enqueue if there is no application
  if [ $# -eq 0 ]; then
    usage 1
  fi

  params_as_array="false"
  # Parse COMPSs Options
  while getopts hvgtmd-: flag; do
    # Treat the argument
    case "$flag" in
      h)
        # Display help
        usage 0
        ;;
      v)
        # Display version
        show_version
        exit 0
        ;;
      -)
      # Check more complex arguments
      case "$OPTARG" in
        array)
          params_as_array="true"
          ;;
        parameters_array)
          params_as_array="true"
          ;;
        help)
          # Display help
          usage 0
          ;;
        version)
          # Display version
          show_full_version
          exit 0
          ;;
        opts)
          # Display options
          show_opts 0
          ;;
        stop)
          action="stop"
          ;;
        master_node=*)
          master_node=${OPTARG//master_node=/}
          ;;
        master_port=*)
          master_port=${OPTARG//master_port=/}
          ;;
        cei=*)
          cei=${OPTARG//cei=/}
          ;;
        lang=*)
          lang=${OPTARG//lang=/}
          ;;
        method_name=*)
          method_name=${OPTARG//method_name=/}
          ;;
        forward_to=*)
          forward_to=${OPTARG//forward_to=/}
          ;;
        *)
          # Flag didn't match any patern. Add to COMPSs
          args_pass="$args_pass --$OPTARG"
          ;;
      esac
      ;;
    *)
      # Flag didn't match any patern. End of COMPSs flags
      args_pass="$args_pass -$flag"
      ;;
    esac
  done

  # Shift COMPSs arguments
  shift $((OPTIND-1))

  # Wrap full app path for lang inference
  fullAppPath=$1

  app_args_optind="${OPTIND}"
}

###############################################
# Function to check the arguments
###############################################
check_args() {
  if [ -z "${fullAppPath}" ]; then
    display_error "${ERROR_APPLICATION}"
  fi

  if [ -z "${master_node}" ]; then
    display_error "${ERROR_MASTER_NODE}"
  fi

  if [ -z "${master_port}" ]; then
    display_error "${ERROR_MASTER_PORT}"
  fi

  if [ -z "${method_name}" ]; then
    method_name=${DEFAULT_METHOD}
    params_as_array="true"
  fi

  if [ -z "${lang}" ]; then
    lang=${DEFAULT_LANG}
  fi
}


###############################################
# Invoke remote method
###############################################
call(){
  display_invocation "$@"
  local http_cei=""
  if [ ! -z "${cei}" ]; then
    http_cei="<ceiClass>${cei}</ceiClass>"
  fi

  local actionTrigger=""
  if [ ! -z "${action}" ]; then
    local forwardsWrapper=""
    if [ ! -z "${forward_to}" ]; then
      local forwardArray=(${forward_to//;/ })
      local agentArray=""
      for agent in "${forwardArray[@]}"; do
        agentArray=$agentArray"<agent>http://${agent}</agent>"
      done
      forwardsWrapper="<forwardTo>"$agentArray"</forwardTo>"
    fi
    actionTrigger="<action><actionName>"${action}"</actionName>"${forwardsWrapper}"</action>"
  fi

  if [ "${params_as_array}" == "true" ]; then
    get_parameters_as_array "${lang}" "$@"
  else
    get_parameters "${lang}" "$@"
  fi  
  local http_parameters=${PARAMETERS}

  local http_resource="http://${master_node}:${master_port}/COMPSs/startApplication"
  local http_header="content-type: application/xml"

  local http_data="<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
  <startApplication>
    <lang>${lang}</lang>
    ${http_cei}
    <className>${fullAppPath}</className>
    <hasResult>false</hasResult>
    <methodName>${method_name}</methodName>
    ${actionTrigger}
    ${http_parameters}
  </startApplication>"
  
  "${APP_CMD}" "-s" "-XPUT" "${http_resource}" "-H" "${http_header}" "-d" "${http_data}"
}

#---------------------------------------------------------------------------------------
# MAIN EXECUTION
#---------------------------------------------------------------------------------------

# Get command args
get_args "$@"
shift ${app_args_optind}

# Check other command args
check_args

call "$@"
echo ""
