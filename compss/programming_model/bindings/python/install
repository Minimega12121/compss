#!/bin/bash

  #
  # SCRIPT GLOBAL CONSTANTS
  #

  SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"


  #
  # SCRIPT GLOBAL HELPERS
  #

  # shellcheck source=./commons
  # shellcheck disable=SC1091
  source "${SCRIPT_DIR}"/commons
  BINDING_DIR="$( dirname "${SCRIPT_DIR}")"


  #
  # HELPER FUNCTIONS
  #

  command_exists () {
    type "$1" &> /dev/null ;
  }

  clean() {
    rm -rf "${SCRIPT_DIR}"/build
  }

  install () {
    local python_command=$1
    local target_directory=$2
    local python_complete_version
    local python_major_version

    python_complete_version=$(${python_command} -V 2>&1)
    python_major_version=$(echo "${python_complete_version}" | sed 's/.* \([0-9]\).\([0-9]\).*/\1/')

    pycompss_home="${target_directory}/${python_major_version}"
    export PYTHONPATH=${pycompss_home}:${OLD_PYTHONPATH}
    #export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-armhf

    echo "INFO: Installation parameters:"
    echo "      - Current script directory: ${SCRIPT_DIR}"
    echo "      - Python command: ${python_command}"
    echo "      - Target directory: ${target_directory}"
    echo "      - PyCOMPSs home: ${pycompss_home}"
    echo "      - Python complete version: ${python_complete_version}"
    echo "      - Python major version: ${python_major_version}"

    # Check that the sources can be byte-compiled - this avoids syntax errors
    # that are not checked on the installation
    ${python_command} -m compileall "${SCRIPT_DIR}"/src/pycompss
    exitCode=$?
    if [ $exitCode -ne 0 ]; then
      echo "ERROR: Cannot install PyCOMPSs. REASON: Could not byte-compile."
      exit $exitCode
    fi

    # Do the installation
    echo "INFO: Starting the installation... Please wait..."
    ${python_command} "${SCRIPT_DIR}"/setup.py install --install-lib="${pycompss_home}" -O2
    exitCode=$?
    if [ $exitCode -ne 0 ]; then
      echo "ERROR: Cannot install PyCOMPSs using ${python_command}"
      exit $exitCode
    fi

    # Extra installation steps only for Mac
    if [ $(uname) == "Darwin" ]; then
      binding_py="$( dirname "${target_directory}")"
      echo "INFO: Extra installation steps for Mac..."
      echo "      - binding_py: ${binding_py}"
      install_name_tool -change ${BINDING_DIR}/bindings-common/lib/libbindings_common.0.dylib ${binding_py}/bindings-common/lib/libbindings_common.dylib ${target_directory}/${python_major_version}/compss*.so
    fi

    # Clean unnecessary files
    echo "INFO: Cleaning unnecessary files..."
    rm ${pycompss_home}/nose_tests.*
    rm ${pycompss_home}/sitecustomize.*
    if [ -d "${pycompss_home}/__pycache__" ]
    then
        rm -rf ${pycompss_home}/__pycache__
    fi

    # Create symbolic links
    if [ "${create_symlinks}" = "true" ]; then
      echo "INFO: Creating symbolic links to site-packages or dist-packages..."
      # Expected when installing with buildlocal. Not from buildsc.
      # Pip package sets these symbolic links and updates the 'activate' script accordingly.
      create_symbolic_links "${python_command}" "${pycompss_home}"
    fi

    # Copy mypy compiling script
    if [ "${python_major_version}" == "3" ]; then
      echo "INFO: Copying compilation script..."
      cp "${SCRIPT_DIR}/scripts/compilation/compile.sh" "${target_directory}/3"
    fi

    # Copy cleaning and commons scripts for setup or uninstalling
    cp "${SCRIPT_DIR}/commons" "${target_directory}"
    cp "${SCRIPT_DIR}/clean" "${target_directory}"
  }


  #
  # MAIN
  #

  # Retrieve script arguments
  target_dir=$1                # Target directory where to install the python binding.
  create_symlinks=$2          # true or false. Create symbolic links within site/dist-packages folders.
  specific_python_command=$3  # Optional argument

  # Add trap for clean
  trap clean EXIT
  export TARGET_OS=$(uname)
  # Install
  OLD_PYTHONPATH=${PYTHONPATH}

  echo "INFO: Starting Python binding installation"

  if [ -z "$specific_python_command" ]; then
    # Install using python3
    if [[ "${target_dir}" = *site-packages* ]] || [[ "${target_dir}" = *dist-packages* ]]; then
      # Check ${target_dir} = site-packages usual, dist-packages in deb based distributions.
      if [[ "${target_dir}" = *python3* ]] || [[ "${target_dir}" = *Python/3* ]]; then
        echo "INFO: Installing within python 3.X site-packages or dist-packages."
        install "python3" "${target_dir}"
      else
        echo "ERROR! Unsupported target directory within site-packages OR dist-packages. Must be Python 3."
        exit 1
      fi
    else
      # Given target dir not in site-pakages nor dist-packages
      echo "INFO: Installing within ${target_dir}"
      install "python3" "${target_dir}"
    fi
  else
    # Given a specific python command
    if command_exists "${specific_python_command}" ; then
      echo "INFO: Installing PyCOMPSs for ${specific_python_command}"
      # Check that the python version used is higher than 3.5.
      specific_python_command_complete_version=$(${specific_python_command} -V 2>&1)
      specific_python_collapsed_version=$(echo "${specific_python_command_complete_version}" | sed 's/.* \([0-9]\).\([0-9]\).*/\1\2/')
      if [ "${specific_python_collapsed_version}" -lt "30" ]; then
        echo "ERROR: Cannot install PyCOMPSs for Python version: ${specific_python_command_complete_version}"
        echo "       PyCOMPSs requires Python 3.X or greater"
        exit 1
      else
        echo "INFO: Installing using ${specific_python_command} within ${target_dir}"
        install "${specific_python_command}" "${target_dir}"
      fi
    else
      echo "ERROR! ${specific_python_command} IS NOT AVAILABLE."
      exit 1
    fi
  fi

  echo "INFO: SUCCESS: Python binding installed"
  # Normal exit
  exit 0
